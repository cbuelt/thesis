res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
View(results)
c <- 751
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
c <- 780
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
c <- 176
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
c <- 20
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
library(SpatialExtremes)
library(graphics)
library(lattice)
library(parallel)
library(gridExtra)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# Simulate Brown-Resnick model
simulate_train <- function(n, range_seq, smooth_seq){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
range <- runif(1, min = range_seq[1], max = range_seq[2])
smooth <- runif(1, min = smooth_seq[1], max = smooth_seq[2])
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
return(list(data = brown, range = range, smooth = smooth))
}
#Create train set
no_cores <- detectCores() - 2
# Initiate cluster
cl <- makeCluster(no_cores)
clusterEvalQ(cl, library(SpatialExtremes))
n <- 200
train_set <- parLapply(cl, rep(1,n), simulate_train, range_seq = c(0.1,3), smooth_seq = c(0.5,1.9))
stopCluster(cl)
View(train_set)
# Create data outputs
train_var <- data.frame(matrix(data = 0, nrow = n, ncol = 2))
colnames(train_var) <- c("range", "smoothness")
train_data <- data.frame(matrix(data = 0, nrow = n, ncol = 625))
for (i in 1:n){
train_var[i,] <- c(train_set[[i]]$range, train_set[[i]]$smooth)
train_data[i,] <- array(train_set[[i]]$data)
}
View(train_data)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
range <- runif(1, min = range_seq[1], max = range_seq[2])
smooth <- runif(1, min = smooth_seq[1], max = smooth_seq[2])
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
brown
dim(brown)
save(brown, "../data/sim.RData")
save(brown, "../data/data_test/sim.RData")
save(brown, "sim.RData")
save(brown, sim.RData)
save(brown, file = "../data/data_test/sim.RData")
test <- load("../data/data_test/sim.RData")
load("../data/data_test/sim.RData")
library(SpatialExtremes)
library(graphics)
library(lattice)
library(parallel)
library(gridExtra)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# Simulate training data
n <- 100
range_seq = c(0.1,3)
smooth_seq = c(0.5,1.9)
# Simulate uniform range
range <- runif(n, min = range_seq[1], max = range_seq[2])
smooth <- runif(n, min = smooth_seq[1], max = smooth_seq[2])
cbind(range,smooth)
params <- cbind(range,smooth)
params[1,]
params[1,][1]
params[1,]$range
params[1,][["range"]]
# Simulate Brown-Resnick model
simulate_train <- function(params){
range <- params[["range"]]
smooth <- params["smooth"]
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
return(brown)
}
simulate_train(params[1,])
# Simulate Brown-Resnick model
simulate_train <- function(params){
range <- params[["range"]]
smooth <- params["smooth"]
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = 1, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
return(brown)
}
# Simulate training data
n <- 100
range_seq = c(0.1,3)
smooth_seq = c(0.5,1.9)
# Simulate uniform range
range <- runif(n, min = range_seq[1], max = range_seq[2])
smooth <- runif(n, min = smooth_seq[1], max = smooth_seq[2])
params <- cbind(range,smooth)
simulate_train(params[1,])
# Simulate training data
n <-
range_seq = c(0.1,3)
# Simulate training data
n <- 10
range_seq = c(0.1,3)
smooth_seq = c(0.5,1.9)
# Simulate uniform range
range <- runif(n, min = range_seq[1], max = range_seq[2])
smooth <- runif(n, min = smooth_seq[1], max = smooth_seq[2])
params <- cbind(range,smooth)
sapply(params, simulate_train)
lapply(params, simulate_train)
vapply(params, simulate_train)
sapply(params, simulate_train)
sapply(t(params), simulate_train)
# Simulate Brown-Resnick model
simulate_train <- function(params){
range <- params[["range"]]
smooth <- params["smooth"]
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = 1, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
return(brown)
}
# Simulate Brown-Resnick model
simulate_train <- function(params){
range <- params[["range"]]
smooth <- params[["smooth"]]
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = 1, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
return(brown)
}
sapply(params, simulate_train)
sapply(t(params), simulate_train)
sapply(t(params), simulate_train)
# Simulate Brown-Resnick model
simulate_train <- function(params){
print(params)
range <- params[["range"]]
smooth <- params[["smooth"]]
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = 1, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
return(brown)
}
# Simulate training data
n <- 10
range_seq = c(0.1,3)
smooth_seq = c(0.5,1.9)
# Simulate uniform range
range <- runif(n, min = range_seq[1], max = range_seq[2])
smooth <- runif(n, min = smooth_seq[1], max = smooth_seq[2])
params <- cbind(range,smooth)
sapply(t(params), simulate_train)
sapply(params, simulate_train)
params <- c(range,smooth)
sapply(params, simulate_train)
params
# Simulate uniform range
range <- runif(n, min = range_seq[1], max = range_seq[2])
smooth <- runif(n, min = smooth_seq[1], max = smooth_seq[2])
range
smooth
params <- c(range,smooth)
params
params <- rbind(range,smooth)
params
sapply(params, simulate_train)
array(params)
params <- rbind(range,smooth)
params <- cbind(range,smooth)
params
type(params)
class(params)
array(params)
array(params, c(1,2))
array(params, c(n,2))
test <- array(params, c(n,2))
sapply(test, simulate_train)
mapply(params, simulate_train)
mapply(simulate_train, params)
mapply(simulate_train, range, smooth)
# Simulate Brown-Resnick model
simulate_train <- function(range,smooth){
# print(params)
#range <- params[["range"]]
#smooth <- params[["smooth"]]
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = 1, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
return(brown)
}
# Simulate training data
n <- 10
range_seq = c(0.1,3)
smooth_seq = c(0.5,1.9)
# Simulate uniform range
range <- runif(n, min = range_seq[1], max = range_seq[2])
smooth <- runif(n, min = smooth_seq[1], max = smooth_seq[2])
params <- cbind(range,smooth)
mapply(simulate_train, range, smooth)
test <- mapply(simulate_train, range, smooth, simplify = TRUE)
test <- mapply(simulate_train, range, smooth, SIMPLIFY = TRUE)
View(test)
View(test)
View(test)
test <- apply(params, MARGIN = 1, FUN = simulate_train)
# Simulate Brown-Resnick model
simulate_train <- function(params){
print(params)
range <- params[["range"]]
smooth <- params[["smooth"]]
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = 1, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
return(brown)
}
test <- apply(params, MARGIN = 1, FUN = simulate_train)
View(test)
test <- sapply(params, MARGIN = 1, FUN = simulate_train)
params <- cbind(range,smooth)
test <- apply(params, MARGIN = 1, FUN = simulate_train)
range
smooth
params
#Save params
save(params, file = "..data/data_test/train_params.RData")
#Save params
save(params, file = "../data/data_test/train_params.RData")
#Save train_data
save(train_data, file = "../data/data_test/train_data.RData")
# Simulate training data
n <- 100
range_seq = c(0.1,3)
smooth_seq = c(0.5,1.9)
# Simulate uniform range
range <- runif(n, min = range_seq[1], max = range_seq[2])
smooth <- runif(n, min = smooth_seq[1], max = smooth_seq[2])
params <- cbind(range,smooth)
#Save params
save(params, file = "../data/data_test/train_params.RData")
#Create train set
no_cores <- detectCores() - 2
# Initiate cluster
cl <- makeCluster(no_cores)
clusterEvalQ(cl, library(SpatialExtremes))
train_data <- parApply(cl, params, MARGIN = 1, FUN = simulate_train)
stopCluster(cl)
View(train_data)
class(train_data)
dim(train_data)
train_params
params
library(SpatialExtremes)
library(graphics)
library(lattice)
library(parallel)
library(gridExtra)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# Simulate Brown-Resnick model
simulate_train <- function(params){
range <- params[["range"]]
smooth <- params[["smooth"]]
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = 1, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
return(brown)
}
# Simulate training data
n <- 2000
range_seq = c(0.1,3)
smooth_seq = c(0.5,1.9)
# Simulate uniform range
range <- runif(n, min = range_seq[1], max = range_seq[2])
smooth <- runif(n, min = smooth_seq[1], max = smooth_seq[2])
train_params <- cbind(range,smooth)
#Save params
save(train_params, file = "../data/data_test/train_params.RData")
#Create train set
no_cores <- detectCores() - 2
# Initiate cluster
cl <- makeCluster(no_cores)
clusterEvalQ(cl, library(SpatialExtremes))
train_data <- parApply(cl, params, MARGIN = 1, FUN = simulate_train)
stopCluster(cl)
library(SpatialExtremes)
library(graphics)
library(lattice)
library(parallel)
library(gridExtra)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# Simulate uniform range
range <- runif(n, min = range_seq[1], max = range_seq[2])
smooth <- runif(n, min = smooth_seq[1], max = smooth_seq[2])
train_params <- cbind(range,smooth)
#Save params
save(train_params, file = "../data/data_test/train_params.RData")
#Create train set
no_cores <- detectCores() - 2
# Initiate cluster
cl <- makeCluster(no_cores)
clusterEvalQ(cl, library(SpatialExtremes))
train_data <- parApply(cl, train_params, MARGIN = 1, FUN = simulate_train)
library(SpatialExtremes)
library(graphics)
library(lattice)
library(parallel)
library(gridExtra)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# Simulate Brown-Resnick model
simulate_train <- function(params){
range <- params[["range"]]
smooth <- params[["smooth"]]
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = 1, coord = coord, cov.mod = "brown", range = range, smoothness = smooth, grid = TRUE)
return(brown)
}
# Simulate training data
n <- 2000
range_seq = c(0.1,3)
smooth_seq = c(0.5,1.9)
# Simulate uniform range
range <- runif(n, min = range_seq[1], max = range_seq[2])
smooth <- runif(n, min = smooth_seq[1], max = smooth_seq[2])
train_params <- cbind(range,smooth)
#Save params
save(train_params, file = "../data/data_test/train_params.RData")
#Create train set
no_cores <- detectCores() - 2
# Initiate cluster
cl <- makeCluster(no_cores)
clusterExport(Cl,c('simulate_train'))
clusterExport(cl,c('simulate_train'))
clusterEvalQ(cl, library(SpatialExtremes))
train_data <- parApply(cl, train_params, MARGIN = 1, FUN = simulate_train)
stopCluster(cl)
#Save train_data
save(train_data, file = "../data/data_test/train_data.RData")
dim(train_data)
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
test <- simulate(50,1,1)
#Generate parameters
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
rep(range_seq,50)
rep(range_seq,50, each = TRUE)
rep(range_seq,50, each = 1)
rep(range_seq,50, each = 0)
rep(range_seq,50, each = 1)
rep(range_seq, 2)
rep(range_seq, times = 2, each = 2)
rep(range_seq, each = 2)
params <- cbind(rep(range_seq, each = 50), rep(smooth_seq, times = 50))
View(params)
params <- cbind(rep(range_seq, each = 200), rep(smooth_seq, times = 50))
View(params)
expand.grid(range_seq, smooth_seq)
comb <- expand.grid(range_seq, smooth_seq)
comb
rep(comb, each = 50)
rep(comb, times = 50)
rep(comb)
rep(comb, each = 2)
comb
params <- cbin(rep(comb$Var1, 50), comb$Var2, 50))
params <- cbin(rep(comb$Var1, 50), rep(comb$Var2, 50))
params <- cbind(rep(comb$Var1, 50), rep(comb$Var2, 50))
params
params <- cbind(rep(comb$Var1, each = 50), rep(comb$Var2, each = 50))
params
params[1:51]
params[1:51,]
comb
#Save parameters
save(test_params, file = "../data/data_test/test_params.RData")
test_params <- cbind(rep(comb$Var1, each = 50), rep(comb$Var2, each = 50))
#Save parameters
save(test_params, file = "../data/data_test/test_params.RData")
View(test_params)
test <- simulate(50,1,1)
class(test)
result <- array(data = 0, dim = 4)
n_comb <- length(comb)
n_comb
n_comb <- dim(comb)[1]
n_comb
result <- array(data = 0, dim = c((n_comb),25,25,n))
dim(result)
result[i] <- test
result[1] <- test
dim(test)
result[]
dim(result[1])
dim(result[1,])
dim(result[1,,,])
#Generate parameters
n <- 50
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- dim(comb)[1]
test_params <- cbind(rep(comb$Var1, each = 50), rep(comb$Var2, each = 50))
#Save parameters
save(test_params, file = "../data/data_test/test_params.RData")
test <- simulate(50,1,1)
result <- array(data = 0, dim = c((n_comb),25,25,n))
result[1,,,] <- test
result[1,,,]
dim(result)
comb
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
#Generate parameters
n <- 50
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- dim(comb)[1]
test_params <- cbind(rep(comb$Var1, each = 50), rep(comb$Var2, each = 50))
#Save parameters
save(test_params, file = "../data/data_test/test_params.RData")
result <- array(data = 0, dim = c((n_comb),25,25,n))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
result[i,,,] <- sim
break
}
result
dim(result)
result[1]
result[1,,,]
sim
dim(sim)
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
#Generate parameters
n <- 50
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- dim(comb)[1]
test_params <- cbind(rep(comb$Var1, each = 50), rep(comb$Var2, each = 50))
#Save parameters
save(test_params, file = "../data/data_test/test_params.RData")
result <- array(data = 0, dim = c((n_comb),25,25,n))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
result[i,,,] <- sim
}
save(result, file = "../data/data_test/test_data.RData")
result[16,,,]
