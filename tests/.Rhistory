remove.packages("reticulate")
library(SpatialExtremes)
library(graphics)
library(lattice)
library(parallel)
library(gridExtra)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
break
}
data.frame(sim)
test <- data.frame(data = sim)
View(test)
test <- data.frame(data = aperm(sim, c(3,1,2))
#Test set
simulate <- function(n, range, smoothness){
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
break
}
cbind(rep(range, n), rep(smooth, n), aperm(sim, c(3,1,2)))
test <- data.frame(data = aperm(sim, c(3,1,2)))
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
break
}
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
break
}
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
break
}
cbind(rep(range, n), rep(smooth, n), aperm(sim, c(3,1,2)))
test <- data.frame(data = aperm(sim, c(3,1,2)))
View(test)
View(test)
test <- matrix(data.frame(data = aperm(sim, c(3,1,2))))
View(test)
test <- as.matrix(data.frame(data = aperm(sim, c(3,1,2))))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
data <- test <- as.matrix(data.frame(data = aperm(sim, c(3,1,2))))
break
}
cbind(rep(range, n), rep(smooth, n), data)
a <- cbind(rep(range, n), rep(smooth, n), data)
View(a)
results
View(results)
results[1:50,]
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
data <- test <- as.matrix(data.frame(data = aperm(sim, c(3,1,2))))
results[1:50,] <- cbind(rep(range, n), rep(smooth, n), data)
break
}
View(results)
grid$z <- results[1,2:627]
grid$z <- results[,2:627]
results
View(results)
grid$z <- results[,25]
grid$z <- results[[,25]]
grid$z <- results[,25]
View(results)
class(results)
results["10"]
results[1,]
res <- array(results[1,])
res
res[10:15]
View(res)
results[1,]
as.array(results[1,])
res <- as.array(results[1,])
View(results)
results[1:50,] <- as.dataframe(cbind(rep(range, n), rep(smooth, n), data))
results[1:50,] <- as.data.frame(cbind(rep(range, n), rep(smooth, n), data))
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
data <- test <- as.matrix(data.frame(data = aperm(sim, c(3,1,2))))
results[1:50,] <- as.data.frame(cbind(rep(range, n), rep(smooth, n), data))
break
}
View(results)
results[1,25]
res <- as.array(results[1,3:627])
results[1,10]
results[1,10:11]
results[1,10:625]
results[1,10:626]
results[1,10:627]
res <- results[1,3:627]
res
t(res)
as.array(t(res))
grid$z <- res
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- results[1,3:627]
grid$z <- res
View(grid)
res <- t(results[1,3:627])
grid$z <- res
View(grid)
smooth <- results[1,1]
range <- results[1,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[1,3:627])
grid$z <- res
smooth <- results[1,1]
range <- results[1,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
res <- t(results[2,3:627])
grid$z <- res
smooth <- results[1,1]
range <- results[1,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
res <- t(results[45,3:627])
grid$z <- res
smooth <- results[1,1]
range <- results[1,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
View(res)
res.describe()
summary(res)
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
data <- test <- as.matrix(data.frame(data = aperm(sim, c(3,1,2))))
results[1:50,] <- as.data.frame(cbind(rep(range, n), rep(smooth, n), data))
break
}
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
data <- as.matrix(data.frame(data = aperm(sim, c(3,1,2))))
results[1:50,] <- as.data.frame(cbind(rep(range, n), rep(smooth, n), data))
break
}
summary(results)
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[45,3:627])
grid$z <- res
smooth <- results[1,1]
range <- results[1,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
sim
summary(sim)
range
smoothness
smooth
sim <- simulate(n, range = range, smoothness = smooth)
summary(sim)
library(SpatialExtremes)
library(graphics)
library(lattice)
library(parallel)
library(gridExtra)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
data <- as.matrix(data.frame(data = aperm(sim, c(3,1,2))))
results[1:50,] <- as.data.frame(cbind(rep(range, n), rep(smooth, n), data))
}
write.csv(results, file = "sim_data/test_data.csv")
View(results)
i <- 1
c((1+50*(i-1)),50*i),
c((1+50*(i-1)),50*i)
i <- 2
c((1+50*(i-1)),50*i)
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
data <- as.matrix(data.frame(data = aperm(sim, c(3,1,2))))
results[(1+50*(i-1)):50*i,] <- as.data.frame(cbind(rep(range, n), rep(smooth, n), data))
}
data
library(SpatialExtremes)
library(graphics)
library(lattice)
library(parallel)
library(gridExtra)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
data <- as.matrix(data.frame(data = aperm(sim, c(3,1,2))))
results[(1+50*(i-1)):50*i,] <- as.data.frame(cbind(rep(range, n), rep(smooth, n), data))
}
View(results)
i
View(results)
results[(1+50*(i-1)):50*i,]
a <- results[(1+50*(i-1)):50*i,]
as.data.frame(cbind(rep(range, n), rep(smooth, n), data))
a <- as.data.frame(cbind(rep(range, n), rep(smooth, n), data))
b <- results[(1+50*(i-1)):50*i,]
a <- as.data.frame(cbind(rep(range, n), rep(smooth, n), data))
(1+50*(i-1))
i <- 2
(1+50*(i-1))
50*i
b <- results[51:100,]
b <- results[(1+50*(i-1)):(50*i),]
#Test set
simulate <- function(n, range, smoothness){
x <- seq(1,20, length = 25)
coord <- cbind(x,x)
brown <- rmaxstab(n = n, coord = coord, cov.mod = "brown", range = range, smoothness = smoothness, grid = TRUE)
return(brown)
}
range_seq <- c(0.5, 0.75, 1, 1.5)
smooth_seq <- c(0.8,1.05,1.3,1.55)
comb <- expand.grid(range_seq, smooth_seq)
n_comb <- length(range_seq) * length(smooth_seq)
n <- 50
results <- data.frame(matrix(data = 0, nrow = (n_comb * n), ncol = (2+25**2)))
for (i in 1:n_comb){
range <- comb[i,1]
smooth <- comb[i,2]
sim <- simulate(n, range = range, smoothness = smooth)
data <- as.matrix(data.frame(data = aperm(sim, c(3,1,2))))
results[(1+50*(i-1)):(50*i),] <- as.data.frame(cbind(rep(range, n), rep(smooth, n), data))
}
write.csv(results, file = "sim_data/test_data.csv")
View(results)
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[45,3:627])
grid$z <- res
smooth <- results[1,1]
range <- results[1,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
res <- t(results[450,3:627])
grid$z <- res
smooth <- results[1,1]
range <- results[1,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
c <- 450
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
c <- 450
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
c <- 750
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
View(results)
c <- 751
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
c <- 780
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
c <- 176
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
c <- 20
x <- seq(1,20, length = 25)
grid <- expand.grid(x=x, y=x)
res <- t(results[c,3:627])
grid$z <- res
smooth <- results[c,1]
range <- results[c,2]
levelplot(z~x*y, grid, col.regions= terrain.colors(100), main = paste0(round(smooth,4),"-", round(range,4)))
